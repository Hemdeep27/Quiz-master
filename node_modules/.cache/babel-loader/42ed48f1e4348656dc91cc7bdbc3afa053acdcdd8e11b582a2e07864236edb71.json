{"ast":null,"code":"import { mapActions, mapGetters } from \"vuex\";\nexport default {\n  name: \"addContest\",\n  data() {\n    return {\n      quizMasterId: sessionStorage.getItem(\"userId\"),\n      contestId: \"\",\n      contestData: [],\n      idData: \"\",\n      contestName: \"\",\n      contestCategory: \"\",\n      noOfQuestions: 0,\n      quizType: \"static\",\n      duration: 0,\n      date: \"\",\n      milliseconds: \"\",\n      options: [{\n        text: \"static\",\n        value: \"static\"\n      }, {\n        text: \"dynamic\",\n        value: \"dynamic\"\n      }],\n      durationOfQuestion: 0,\n      start: \"\",\n      end: \"\"\n      // data: this.contestCategory.toLowerCase()\n    };\n  },\n\n  computed: {\n    ...mapGetters[(\"getAddContest\", \"getLoginUser\")]\n  },\n  watch: {\n    contestId() {\n      this.idData = this.contestId;\n    }\n  },\n  methods: {\n    ...mapActions[\"ADD_CONTEST\"],\n    addContestHandler() {\n      console.log(this.getLoginUser);\n      const staticPayload = {\n        approved: true,\n        contentCategory: this.contestCategory.toLowerCase(),\n        contestName: this.contestName,\n        durationOfContest: this.minutesToUnixTimestamp(this.duration),\n        moderatorId: \"1\",\n        quizMasterId: this.quizMasterId,\n        quizType: this.quizType,\n        noOfQuestions: this.noOfQuestions\n      };\n      console.log(staticPayload);\n      const dynamicPayload = {\n        approved: true,\n        contentCategory: this.contestCategory.toLowerCase(),\n        contestName: this.contestName,\n        durationOfContest: this.durationOfQuestion,\n        moderatorId: \"1\",\n        quizMasterId: this.quizMasterId,\n        quizType: this.quizType,\n        noOfQuestions: this.noOfQuestions,\n        startTime: this.startTimeToUnix,\n        date: this.date\n      };\n      console.log(dynamicPayload);\n      // debugger;\n      // this.$store.dispatch(\"ADD_CONTEST\", { payload: payload, successData: (data)=> {\n      //   this.contestId = data;\n      // console.log(\"after Dispatching ADD_CONTEST\", this.contestId)\n      // console.log(\"ContestId before Dispatch\",this.contestId);\n      // this.$store.dispatch(\"GET_CONTEST_BY_ID\", {id:this.contestId, successData: (data) => {\n      //   this.contestData = data;\n      //   console.log(data);\n      // }})\n      // this.$router.push(\"/addQuestion/\"+this.contestId)\n      // } }); \n    },\n\n    startTimeToUnix() {\n      let futureDate = new Date(this.date + \"T\" + this.start);\n      let time = futureDate.getTime();\n      return time;\n    },\n    minutesToUnixTimestamp(minutes) {\n      let milliseconds = minutes * 60 * 1000;\n      let unixTimestamp = Date.UTC(1970, 0, 1) + milliseconds;\n      return unixTimestamp;\n    },\n    futureTime() {\n      // let futureDate = null;\n    }\n  }\n};","map":{"version":3,"mappings":"AAsEA;AACA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC,UACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,EACA;MACAC;MACAC;MACAC;MACA;IACA;EACA;;EACAC;IACA;EACA;EACAC;IACAjB;MACA;IACA;EACA;EACAkB;IACA;IACAC;MACAC;MACA;QACAC;QACAC;QACAnB;QACAoB;QACAC;QACAzB;QACAO;QACAD;MACA;MACAe;MACA;QACAC;QACAC;QACAnB;QACAoB;QACAC;QACAzB;QACAO;QACAD;QACAoB;QACAjB;MACA;MACAY;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAGA;;IACAM;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;IAAA;EAEA;AACA","names":["name","data","quizMasterId","contestId","contestData","idData","contestName","contestCategory","noOfQuestions","quizType","duration","date","milliseconds","options","text","value","durationOfQuestion","start","end","computed","watch","methods","addContestHandler","console","approved","contentCategory","durationOfContest","moderatorId","startTime","startTimeToUnix","minutesToUnixTimestamp","futureTime"],"sourceRoot":"src/views","sources":["AddContestView.vue"],"sourcesContent":["<template>\n  <div class=\"addContest\">\n    <div class=\"contestForm\" data-aos=\"fade-down\">\n      <h1>Add a Contest</h1>\n      <form @submit.prevent=\"addContestHandler\">\n        <label>Contest Name</label> <br />\n        <input type=\"text\" v-model=\"contestName\" placeholder=\"Contest Name\" />\n        <br />\n        <label>Contest Category</label> <br />\n        <input\n          type=\"text\"\n          v-model=\"contestCategory\"\n          placeholder=\"Contest Categroy\"\n        /><br />\n        <label>noOfQuestions</label> <br />\n        <input\n          type=\"number\"\n          v-model=\"noOfQuestions\"\n          placeholder=\"Number of Question\"\n        />\n        <br />\n        <label>Quiz Type</label> <br />\n        <select v-model=\"quizType\">\n          <option\n            v-for=\"option in options\"\n            :value=\"option.value\"\n            :key=\"option.value\"\n          >\n            {{ option.text }}\n          </option></select\n        ><br />\n        <label v-if=\"quizType === 'static'\">Duration</label><br />\n\n        <input\n          v-if=\"quizType === 'static'\"\n          type=\"text\"\n          pattern=\"[0-5]?[0-9]\"\n          v-model=\"duration\"\n          placeholder=\"Enter minutes\"\n        /><br />\n        <label v-if=\"quizType === 'dynamic'\">Duration of a Question(sec)</label><br />\n\n        <input\n          v-if=\"quizType === 'dynamic'\"\n          type=\"text\"\n          pattern=\"[0-5]?[0-9]\"\n          v-model=\"durationOfQuestion\"\n          placeholder=\"Enter minutes\"\n        /><br />\n        <label v-if=\"quizType === 'dynamic'\">Date</label>\n        <br v-if=\"quizType === 'dynamic'\" />\n        <input v-if=\"quizType === 'dynamic'\" type=\"date\" v-model=\"date\"/><br>\n        <label v-if=\"quizType === 'dynamic'\" >Start Time</label>\n        <br v-if=\"quizType === 'dynamic'\" />\n        <input v-if=\"quizType === 'dynamic'\" type=\"time\" v-model=\"start\"/>\n        <br v-if=\"quizType === 'dynamic'\" />\n        <!-- <label v-if=\"quizType === 'dynamic'\">End Time</label>\n        <br v-if=\"quizType === 'dynamic'\" />\n        <input v-if=\"quizType === 'dynamic'\" type=\"number\" /><br\n          v-if=\"quizType === 'dynamic'\"\n        /> -->\n        <button>Submit</button>\n      </form>\n        <!-- {{contestId}} -->\n        <!-- {{getLoginUser}} -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from \"vuex\";\nexport default {\n  name: \"addContest\",\n  data() {\n    return {\n      quizMasterId: sessionStorage.getItem(\"userId\"),\n      contestId: \"\",\n      contestData: [],\n      idData: \"\",\n      contestName: \"\",\n      contestCategory: \"\",\n      noOfQuestions: 0,\n      quizType: \"static\",\n      duration: 0,\n      date: \"\",\n      milliseconds: \"\",\n      options: [\n        { text: \"static\", value: \"static\" },\n        { text: \"dynamic\", value: \"dynamic\" },\n      ],\n      durationOfQuestion: 0,\n      start: \"\",\n      end: \"\",\n      // data: this.contestCategory.toLowerCase()\n    };\n  },\n  computed: {\n    ...mapGetters[\"getAddContest\", \"getLoginUser\"],\n  },\n  watch: {\n    contestId() {\n      this.idData = this.contestId;\n    }\n  },\n  methods: {\n    ...mapActions[\"ADD_CONTEST\"],\n    addContestHandler() {\n      console.log(this.getLoginUser)\n      const staticPayload = {\n        approved: true,\n        contentCategory: this.contestCategory.toLowerCase(),\n        contestName: this.contestName,\n        durationOfContest: this.minutesToUnixTimestamp(this.duration),\n        moderatorId: \"1\",\n        quizMasterId: this.quizMasterId,\n        quizType: this.quizType,\n        noOfQuestions: this.noOfQuestions,\n      };\n      console.log(staticPayload);\n      const dynamicPayload = {\n        approved: true,\n        contentCategory: this.contestCategory.toLowerCase(),\n        contestName: this.contestName,\n        durationOfContest: this.durationOfQuestion,\n        moderatorId: \"1\",\n        quizMasterId: this.quizMasterId,\n        quizType: this.quizType,\n        noOfQuestions: this.noOfQuestions,\n        startTime: this.startTimeToUnix,\n        date: this.date,\n      }\n      console.log(dynamicPayload)\n      // debugger;\n      // this.$store.dispatch(\"ADD_CONTEST\", { payload: payload, successData: (data)=> {\n      //   this.contestId = data;\n        // console.log(\"after Dispatching ADD_CONTEST\", this.contestId)\n        // console.log(\"ContestId before Dispatch\",this.contestId);\n        // this.$store.dispatch(\"GET_CONTEST_BY_ID\", {id:this.contestId, successData: (data) => {\n        //   this.contestData = data;\n        //   console.log(data);\n        // }})\n        // this.$router.push(\"/addQuestion/\"+this.contestId)\n      // } }); \n      \n      \n    },\n    startTimeToUnix(){\n      let futureDate = new Date(this.date + \"T\" + this.start);\n      let time =  futureDate.getTime();\n      return time;\n    },\n    minutesToUnixTimestamp(minutes) {\n      let milliseconds = minutes * 60 * 1000;\n      let unixTimestamp = Date.UTC(1970, 0, 1) + milliseconds;\n      return unixTimestamp;\n    },\n    futureTime() {\n      // let futureDate = null;\n    }\n  },\n};\n</script>\n\n<style scoped>\n.addContest {\n  display: flex;\n  /* flex-direction: row; */\n  justify-content: center;\n  margin: 30px 0 100px 0;\n  /* height: 100vh; */\n  /* background-color: rgb(121, 200, 115); */\n}\n\nh1 {\n  display: inline;\n  margin-bottom: 20px;\n}\n\n.contestForm {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  width: 400px;\n  margin-right: 30px;\n  padding: 50px 50px;\n  border: 2px solid rgba(3, 101, 214, 0.866);\n  /* background-color: rgb(224, 126, 80); */\n  transition: box-shadow 1s ease-in-out;\n}\n\n.contestForm:hover {\n  box-shadow: 10px 13px 0px rgba(3, 102, 214, 0.3);\n}\n\nlabel {\n  font-size: 22px;\n  margin-bottom: 10px;\n}\n\ninput {\n  height: 45px;\n  width: 330px;\n  border: none;\n  font-size: 18px;\n  margin-bottom: 10px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 3px 0px,\n    rgba(0, 0, 0, 0.06) 0px 1px 2px 0px;\n  border-radius: 5px;\n}\n\nselect {\n  height: 45px;\n  width: 330px;\n  border: none;\n  font-size: 18px;\n  margin-bottom: 10px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 3px 0px,\n    rgba(0, 0, 0, 0.06) 0px 1px 2px 0px;\n  border-radius: 5px;\n}\n\ninput:active {\n}\n\ninput::placeholder {\n  font-size: 22px;\n}\n\nbutton {\n  width: 290px;\n  height: 45px;\n  border: none;\n  font-size: 22px;\n  margin-top: 20px;\n  border-radius: 8px;\n}\n\nbutton:hover {\n  color: black;\n  box-shadow: rgba(3, 102, 214, 0.3) 0px 0px 0px 4px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}