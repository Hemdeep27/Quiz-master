{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  state: {\n    addContest: {},\n    contestIdData: \"\",\n    dynamicIdData: \"\",\n    register: \"\",\n    login: \"\",\n    loginUser: sessionStorage.getItem(\"userName\") ? sessionStorage.getItem(\"userName\") : \"\",\n    loginBool: sessionStorage.getItem(\"userId\") ? true : false,\n    staticContests: []\n  },\n  getters: {\n    getAddContest: state => {\n      return state.addContest;\n    },\n    getContestIdData: state => {\n      return state.contestIdData;\n    },\n    getRegister: state => {\n      return state.register;\n    },\n    getLogin: state => {\n      return state.login;\n    },\n    getLoginUser: state => {\n      console.log(state.loginUser);\n      return state.loginUser;\n    },\n    getLoginBool: state => {\n      return state.loginBool;\n    },\n    getDynamicIdData: state => {\n      return state.dynamicIdData;\n    },\n    getStaticContest: state => {\n      return state.staticContests;\n    }\n  },\n  mutations: {\n    setAddContest: (state, value) => {\n      state.addContest = value;\n    },\n    setContestIdData: (state, value) => {\n      state.contestIdData = value;\n    },\n    setRegister: (state, value) => {\n      state.register = value;\n    },\n    setLogin: (state, value) => {\n      state.login = value;\n    },\n    setLoginBool: (state, value) => {\n      state.loginBool = value;\n    },\n    setDynamicIdData: (state, value) => {\n      state.dynamicIdData = value;\n    },\n    setStaticContests: (state, value) => {\n      state.staticContests = value;\n    },\n    resetLogin: state => {\n      state.loginBool = false;\n      state.login = \"\";\n      sessionStorage.clear();\n    }\n  },\n  actions: {\n    async ADD_CONTEST({\n      commit\n    }, {\n      payload,\n      successData\n    }) {\n      //   const headers = {\n      //     Authorization: sessionStorage.getItem(\"accessToken\"),\n      //     userId: sessionStorage.getItem(\"userId\"),\n      //   };\n      const response = await axios.post(\"/api/quizMaster/QuizMaster/addContest\", payload, {\n        headers: {\n          Authorization: sessionStorage.getItem(\"accessToken\"),\n          userId: sessionStorage.getItem(\"userId\")\n        }\n      });\n      // const date = new Date();\n      const payloadData = {\n        quizId: payload.contestName,\n        quizTopic: payload.contentCategory,\n        startTime: payload.durationOfContest\n      };\n      axios.post(\"/api/kafka/addQuiz\", payloadData);\n      console.log(\"from Contest store\", response.data);\n      if (response.data) {\n        successData(response.data);\n      }\n      commit(\"setAddContest\", response.data);\n    },\n    async GET_CONTEST_BY_ID({\n      commit\n    }, {\n      id,\n      successData\n    }) {\n      // /contest/getContestById/{id}\n      const response = await axios.get(\"/api/quizContest/contest/getContestById/\" + id, {\n        headers: {\n          Authorization: sessionStorage.getItem(\"accessToken\"),\n          userId: sessionStorage.getItem(\"userId\")\n        }\n      });\n      // console.log(response.data)\n      successData(response.data);\n      commit(\"setContestIdData\", response.data);\n    },\n    async GET_DYNAMIC_ID({\n      commit\n    }, {\n      id,\n      successData\n    }) {\n      const response = await axios.get(\"/api/quizDynamic/DynamicContest/getDynamicContestById/\" + id, {\n        headers: {\n          Authorization: sessionStorage.getItem(\"accessToken\"),\n          userId: sessionStorage.getItem(\"userId\")\n        }\n      });\n      console.log(\"from store dynamic\", response.data);\n      successData(response.data);\n      commit(\"setDynamicIdData\", response.data);\n    },\n    async REGISTER({\n      commit\n    }, {\n      payload\n    }) {\n      console.log(\"register payload\", payload);\n      const response = await axios.post(\"/oauth/api/auth/register\", payload);\n      console.log(\"reponse data\", response);\n      commit(\"setRegister\", response.data);\n    },\n    async LOGIN({\n      commit\n    }, {\n      payload\n    }) {\n      // const headers = {\n      //     Authorization: sessionStorage.getItem(\"accessToken\"),\n      //     userId: sessionStorage.getItem(\"userId\")\n      // }\n      console.log(\"login payload\", payload);\n      const response = await axios.post(\"/oauth/api/auth/login\", payload);\n      // post(\"url\", {\n      // headers: {\n      // Authorization: \"token\",\n      // userId: \"userID\"\n      // }\n      // })\n      console.log(\"response login\", response.data);\n      sessionStorage.setItem(\"userName\", payload.username);\n      sessionStorage.setItem(\"userId\", response.data.userId);\n      sessionStorage.setItem(\"accessToken\", response.data.accessToken);\n      commit(\"setLoginBool\", true);\n      commit(\"setLogin\", response.data);\n    },\n    async RESET_LOGIN({\n      commit\n    }, {\n      payload\n    }) {\n      const response = await axios.post(\"/oauth/api/auth/logout\", payload);\n      console.log(response);\n      commit(\"resetLogin\");\n    },\n    async STATIC_CONTESTS({\n      commit\n    }, {\n      masterId\n    }) {\n      // /contest/getAllContestByQuizMaster/{quizMasterId}\n      const response = await axios.get(\"/api/quizContest/contest/getAllContestByQuizMaster/\" + masterId, {\n        headers: {\n          Authorization: sessionStorage.getItem(\"accessToken\"),\n          userId: sessionStorage.getItem(\"userId\")\n        }\n      });\n      commit('setStaticContests', response.data);\n    }\n  }\n};","map":{"version":3,"names":["axios","state","addContest","contestIdData","dynamicIdData","register","login","loginUser","sessionStorage","getItem","loginBool","staticContests","getters","getAddContest","getContestIdData","getRegister","getLogin","getLoginUser","console","log","getLoginBool","getDynamicIdData","getStaticContest","mutations","setAddContest","value","setContestIdData","setRegister","setLogin","setLoginBool","setDynamicIdData","setStaticContests","resetLogin","clear","actions","ADD_CONTEST","commit","payload","successData","response","post","headers","Authorization","userId","payloadData","quizId","contestName","quizTopic","contentCategory","startTime","durationOfContest","data","GET_CONTEST_BY_ID","id","get","GET_DYNAMIC_ID","REGISTER","LOGIN","setItem","username","accessToken","RESET_LOGIN","STATIC_CONTESTS","masterId"],"sources":["/Users/yeshwanthmunagapati/Desktop/Team6-Quiz/frontend/guiz-app/src/store/QuizMaster.js"],"sourcesContent":["import axios from \"axios\";\n\nexport default {\n  state: {\n    addContest: {},\n    contestIdData: \"\",\n    dynamicIdData: \"\",\n    register: \"\",\n    login: \"\",\n    loginUser: sessionStorage.getItem(\"userName\")\n      ? sessionStorage.getItem(\"userName\")\n      : \"\",\n    loginBool: sessionStorage.getItem(\"userId\") ? true : false,\n    staticContests: [],\n  },\n  getters: {\n    getAddContest: (state) => {\n      return state.addContest;\n    },\n    getContestIdData: (state) => {\n      return state.contestIdData;\n    },\n    getRegister: (state) => {\n      return state.register;\n    },\n    getLogin: (state) => {\n      return state.login;\n    },\n    getLoginUser: (state) => {\n      console.log(state.loginUser);\n      return state.loginUser;\n    },\n    getLoginBool: (state) => {\n      return state.loginBool;\n    },\n    getDynamicIdData: (state) => {\n      return state.dynamicIdData;\n    },\n    getStaticContest: (state) => {\n        return state.staticContests;\n    }\n  },\n  mutations: {\n    setAddContest: (state, value) => {\n      state.addContest = value;\n    },\n    setContestIdData: (state, value) => {\n      state.contestIdData = value;\n    },\n    setRegister: (state, value) => {\n      state.register = value;\n    },\n    setLogin: (state, value) => {\n      state.login = value;\n    },\n    setLoginBool: (state, value) => {\n      state.loginBool = value;\n    },\n    setDynamicIdData: (state, value) => {\n      state.dynamicIdData = value;\n    },\n    setStaticContests: (state, value) => {\n        state.staticContests = value;\n    },\n    resetLogin: (state) => {\n      state.loginBool = false;\n      state.login = \"\";\n      sessionStorage.clear();\n    },\n  },\n  actions: {\n    async ADD_CONTEST({ commit }, { payload, successData }) {\n      //   const headers = {\n      //     Authorization: sessionStorage.getItem(\"accessToken\"),\n      //     userId: sessionStorage.getItem(\"userId\"),\n      //   };\n      const response = await axios.post(\n        \"/api/quizMaster/QuizMaster/addContest\",\n        payload,\n        {\n          headers: {\n            Authorization: sessionStorage.getItem(\"accessToken\"),\n            userId: sessionStorage.getItem(\"userId\"),\n          },\n        }\n      );\n      // const date = new Date();\n      const payloadData = {\n        quizId: payload.contestName,\n        quizTopic: payload.contentCategory,\n        startTime:  payload.durationOfContest,\n      };\n      axios.post(\"/api/kafka/addQuiz\", payloadData);\n      console.log(\"from Contest store\", response.data);\n      if (response.data) {\n        successData(response.data);\n      }\n      commit(\"setAddContest\", response.data);\n    },\n    async GET_CONTEST_BY_ID({ commit }, { id, successData }) {\n      // /contest/getContestById/{id}\n      const response = await axios.get(\n        \"/api/quizContest/contest/getContestById/\" + id,\n        {\n          headers: {\n            Authorization: sessionStorage.getItem(\"accessToken\"),\n            userId: sessionStorage.getItem(\"userId\"),\n          },\n        }\n      );\n      // console.log(response.data)\n      successData(response.data);\n      commit(\"setContestIdData\", response.data);\n    },\n    async GET_DYNAMIC_ID({ commit }, { id, successData }) {\n      const response = await axios.get(\n        \"/api/quizDynamic/DynamicContest/getDynamicContestById/\" + id,\n        {\n          headers: {\n            Authorization: sessionStorage.getItem(\"accessToken\"),\n            userId: sessionStorage.getItem(\"userId\"),\n          },\n        }\n      );\n      console.log(\"from store dynamic\", response.data);\n      successData(response.data);\n      commit(\"setDynamicIdData\", response.data);\n    },\n    async REGISTER({ commit }, { payload }) {\n      console.log(\"register payload\", payload);\n      const response = await axios.post(\"/oauth/api/auth/register\", payload);\n      console.log(\"reponse data\", response);\n      commit(\"setRegister\", response.data);\n    },\n    async LOGIN({ commit }, { payload }) {\n      // const headers = {\n      //     Authorization: sessionStorage.getItem(\"accessToken\"),\n      //     userId: sessionStorage.getItem(\"userId\")\n      // }\n      console.log(\"login payload\", payload);\n      const response = await axios.post(\"/oauth/api/auth/login\", payload);\n      // post(\"url\", {\n      // headers: {\n      // Authorization: \"token\",\n      // userId: \"userID\"\n      // }\n      // })\n      console.log(\"response login\", response.data);\n      sessionStorage.setItem(\"userName\", payload.username);\n      sessionStorage.setItem(\"userId\", response.data.userId);\n      sessionStorage.setItem(\"accessToken\", response.data.accessToken);\n      commit(\"setLoginBool\", true);\n      commit(\"setLogin\", response.data);\n    },\n    async RESET_LOGIN({ commit }, {payload}) {\n      const response = await axios.post(\"/oauth/api/auth/logout\", payload);\n      console.log(response)\n      commit(\"resetLogin\");\n    },\n    async STATIC_CONTESTS({commit}, {masterId}) {\n      // /contest/getAllContestByQuizMaster/{quizMasterId}\n        const response = await axios.get(\n          \"/api/quizContest/contest/getAllContestByQuizMaster/\"+masterId,\n          {\n            headers: {\n              Authorization: sessionStorage.getItem(\"accessToken\"),\n              userId: sessionStorage.getItem(\"userId\"),\n            },\n          }\n        );\n        commit('setStaticContests', response.data)\n    },\n  },\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,eAAe;EACbC,KAAK,EAAE;IACLC,UAAU,EAAE,CAAC,CAAC;IACdC,aAAa,EAAE,EAAE;IACjBC,aAAa,EAAE,EAAE;IACjBC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,SAAS,EAAEC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC,GACzCD,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC,GAClC,EAAE;IACNC,SAAS,EAAEF,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC,GAAG,IAAI,GAAG,KAAK;IAC1DE,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE;IACPC,aAAa,EAAGZ,KAAK,IAAK;MACxB,OAAOA,KAAK,CAACC,UAAU;IACzB,CAAC;IACDY,gBAAgB,EAAGb,KAAK,IAAK;MAC3B,OAAOA,KAAK,CAACE,aAAa;IAC5B,CAAC;IACDY,WAAW,EAAGd,KAAK,IAAK;MACtB,OAAOA,KAAK,CAACI,QAAQ;IACvB,CAAC;IACDW,QAAQ,EAAGf,KAAK,IAAK;MACnB,OAAOA,KAAK,CAACK,KAAK;IACpB,CAAC;IACDW,YAAY,EAAGhB,KAAK,IAAK;MACvBiB,OAAO,CAACC,GAAG,CAAClB,KAAK,CAACM,SAAS,CAAC;MAC5B,OAAON,KAAK,CAACM,SAAS;IACxB,CAAC;IACDa,YAAY,EAAGnB,KAAK,IAAK;MACvB,OAAOA,KAAK,CAACS,SAAS;IACxB,CAAC;IACDW,gBAAgB,EAAGpB,KAAK,IAAK;MAC3B,OAAOA,KAAK,CAACG,aAAa;IAC5B,CAAC;IACDkB,gBAAgB,EAAGrB,KAAK,IAAK;MACzB,OAAOA,KAAK,CAACU,cAAc;IAC/B;EACF,CAAC;EACDY,SAAS,EAAE;IACTC,aAAa,EAAE,CAACvB,KAAK,EAAEwB,KAAK,KAAK;MAC/BxB,KAAK,CAACC,UAAU,GAAGuB,KAAK;IAC1B,CAAC;IACDC,gBAAgB,EAAE,CAACzB,KAAK,EAAEwB,KAAK,KAAK;MAClCxB,KAAK,CAACE,aAAa,GAAGsB,KAAK;IAC7B,CAAC;IACDE,WAAW,EAAE,CAAC1B,KAAK,EAAEwB,KAAK,KAAK;MAC7BxB,KAAK,CAACI,QAAQ,GAAGoB,KAAK;IACxB,CAAC;IACDG,QAAQ,EAAE,CAAC3B,KAAK,EAAEwB,KAAK,KAAK;MAC1BxB,KAAK,CAACK,KAAK,GAAGmB,KAAK;IACrB,CAAC;IACDI,YAAY,EAAE,CAAC5B,KAAK,EAAEwB,KAAK,KAAK;MAC9BxB,KAAK,CAACS,SAAS,GAAGe,KAAK;IACzB,CAAC;IACDK,gBAAgB,EAAE,CAAC7B,KAAK,EAAEwB,KAAK,KAAK;MAClCxB,KAAK,CAACG,aAAa,GAAGqB,KAAK;IAC7B,CAAC;IACDM,iBAAiB,EAAE,CAAC9B,KAAK,EAAEwB,KAAK,KAAK;MACjCxB,KAAK,CAACU,cAAc,GAAGc,KAAK;IAChC,CAAC;IACDO,UAAU,EAAG/B,KAAK,IAAK;MACrBA,KAAK,CAACS,SAAS,GAAG,KAAK;MACvBT,KAAK,CAACK,KAAK,GAAG,EAAE;MAChBE,cAAc,CAACyB,KAAK,EAAE;IACxB;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAW,CAAC;MAAEC;IAAO,CAAC,EAAE;MAAEC,OAAO;MAAEC;IAAY,CAAC,EAAE;MACtD;MACA;MACA;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMvC,KAAK,CAACwC,IAAI,CAC/B,uCAAuC,EACvCH,OAAO,EACP;QACEI,OAAO,EAAE;UACPC,aAAa,EAAElC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;UACpDkC,MAAM,EAAEnC,cAAc,CAACC,OAAO,CAAC,QAAQ;QACzC;MACF,CAAC,CACF;MACD;MACA,MAAMmC,WAAW,GAAG;QAClBC,MAAM,EAAER,OAAO,CAACS,WAAW;QAC3BC,SAAS,EAAEV,OAAO,CAACW,eAAe;QAClCC,SAAS,EAAGZ,OAAO,CAACa;MACtB,CAAC;MACDlD,KAAK,CAACwC,IAAI,CAAC,oBAAoB,EAAEI,WAAW,CAAC;MAC7C1B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEoB,QAAQ,CAACY,IAAI,CAAC;MAChD,IAAIZ,QAAQ,CAACY,IAAI,EAAE;QACjBb,WAAW,CAACC,QAAQ,CAACY,IAAI,CAAC;MAC5B;MACAf,MAAM,CAAC,eAAe,EAAEG,QAAQ,CAACY,IAAI,CAAC;IACxC,CAAC;IACD,MAAMC,iBAAiB,CAAC;MAAEhB;IAAO,CAAC,EAAE;MAAEiB,EAAE;MAAEf;IAAY,CAAC,EAAE;MACvD;MACA,MAAMC,QAAQ,GAAG,MAAMvC,KAAK,CAACsD,GAAG,CAC9B,0CAA0C,GAAGD,EAAE,EAC/C;QACEZ,OAAO,EAAE;UACPC,aAAa,EAAElC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;UACpDkC,MAAM,EAAEnC,cAAc,CAACC,OAAO,CAAC,QAAQ;QACzC;MACF,CAAC,CACF;MACD;MACA6B,WAAW,CAACC,QAAQ,CAACY,IAAI,CAAC;MAC1Bf,MAAM,CAAC,kBAAkB,EAAEG,QAAQ,CAACY,IAAI,CAAC;IAC3C,CAAC;IACD,MAAMI,cAAc,CAAC;MAAEnB;IAAO,CAAC,EAAE;MAAEiB,EAAE;MAAEf;IAAY,CAAC,EAAE;MACpD,MAAMC,QAAQ,GAAG,MAAMvC,KAAK,CAACsD,GAAG,CAC9B,wDAAwD,GAAGD,EAAE,EAC7D;QACEZ,OAAO,EAAE;UACPC,aAAa,EAAElC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;UACpDkC,MAAM,EAAEnC,cAAc,CAACC,OAAO,CAAC,QAAQ;QACzC;MACF,CAAC,CACF;MACDS,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEoB,QAAQ,CAACY,IAAI,CAAC;MAChDb,WAAW,CAACC,QAAQ,CAACY,IAAI,CAAC;MAC1Bf,MAAM,CAAC,kBAAkB,EAAEG,QAAQ,CAACY,IAAI,CAAC;IAC3C,CAAC;IACD,MAAMK,QAAQ,CAAC;MAAEpB;IAAO,CAAC,EAAE;MAAEC;IAAQ,CAAC,EAAE;MACtCnB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEkB,OAAO,CAAC;MACxC,MAAME,QAAQ,GAAG,MAAMvC,KAAK,CAACwC,IAAI,CAAC,0BAA0B,EAAEH,OAAO,CAAC;MACtEnB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEoB,QAAQ,CAAC;MACrCH,MAAM,CAAC,aAAa,EAAEG,QAAQ,CAACY,IAAI,CAAC;IACtC,CAAC;IACD,MAAMM,KAAK,CAAC;MAAErB;IAAO,CAAC,EAAE;MAAEC;IAAQ,CAAC,EAAE;MACnC;MACA;MACA;MACA;MACAnB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEkB,OAAO,CAAC;MACrC,MAAME,QAAQ,GAAG,MAAMvC,KAAK,CAACwC,IAAI,CAAC,uBAAuB,EAAEH,OAAO,CAAC;MACnE;MACA;MACA;MACA;MACA;MACA;MACAnB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEoB,QAAQ,CAACY,IAAI,CAAC;MAC5C3C,cAAc,CAACkD,OAAO,CAAC,UAAU,EAAErB,OAAO,CAACsB,QAAQ,CAAC;MACpDnD,cAAc,CAACkD,OAAO,CAAC,QAAQ,EAAEnB,QAAQ,CAACY,IAAI,CAACR,MAAM,CAAC;MACtDnC,cAAc,CAACkD,OAAO,CAAC,aAAa,EAAEnB,QAAQ,CAACY,IAAI,CAACS,WAAW,CAAC;MAChExB,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC;MAC5BA,MAAM,CAAC,UAAU,EAAEG,QAAQ,CAACY,IAAI,CAAC;IACnC,CAAC;IACD,MAAMU,WAAW,CAAC;MAAEzB;IAAO,CAAC,EAAE;MAACC;IAAO,CAAC,EAAE;MACvC,MAAME,QAAQ,GAAG,MAAMvC,KAAK,CAACwC,IAAI,CAAC,wBAAwB,EAAEH,OAAO,CAAC;MACpEnB,OAAO,CAACC,GAAG,CAACoB,QAAQ,CAAC;MACrBH,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;IACD,MAAM0B,eAAe,CAAC;MAAC1B;IAAM,CAAC,EAAE;MAAC2B;IAAQ,CAAC,EAAE;MAC1C;MACE,MAAMxB,QAAQ,GAAG,MAAMvC,KAAK,CAACsD,GAAG,CAC9B,qDAAqD,GAACS,QAAQ,EAC9D;QACEtB,OAAO,EAAE;UACPC,aAAa,EAAElC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;UACpDkC,MAAM,EAAEnC,cAAc,CAACC,OAAO,CAAC,QAAQ;QACzC;MACF,CAAC,CACF;MACD2B,MAAM,CAAC,mBAAmB,EAAEG,QAAQ,CAACY,IAAI,CAAC;IAC9C;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}