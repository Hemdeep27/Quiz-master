{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  state: {\n    addContest: \"\",\n    contestIdData: \"\",\n    dynamicIdData: \"\",\n    register: \"\",\n    login: \"\",\n    loginUser: sessionStorage.getItem(\"userName\") ? sessionStorage.getItem(\"userName\") : \"\",\n    loginBool: sessionStorage.getItem(\"userId\") ? true : false\n  },\n  getters: {\n    getAddContest: state => {\n      return state.addContest;\n    },\n    getContestIdData: state => {\n      return state.contestIdData;\n    },\n    getRegister: state => {\n      return state.register;\n    },\n    getLogin: state => {\n      return state.login;\n    },\n    getLoginUser: state => {\n      console.log(state.loginUser);\n      return state.loginUser;\n    },\n    getLoginBool: state => {\n      return state.loginBool;\n    },\n    getDynamicIdData: state => {\n      return state.dynamicIdData;\n    }\n  },\n  mutations: {\n    setAddContest: (state, value) => {\n      state.addContest = value;\n    },\n    setContestIdData: (state, value) => {\n      state.contestIdData = value;\n    },\n    setRegister: (state, value) => {\n      state.register = value;\n    },\n    setLogin: (state, value) => {\n      state.login = value;\n    },\n    setLoginBool: (state, value) => {\n      state.loginBool = value;\n    },\n    setDynamicIdData: (state, value) => {\n      state.dynamicIdData = value;\n    },\n    resetLogin: state => {\n      state.loginBool = false;\n      state.login = \"\";\n    }\n  },\n  actions: {\n    async ADD_CONTEST({\n      commit\n    }, {\n      payload,\n      successData\n    }) {\n      const response = await axios.post(\"/api/QuizMaster/addContest\", payload);\n      const date = new Date();\n      const payloadData = {\n        quizId: response.data,\n        quizTopic: payload.contentCategory,\n        startTime: date.getTime()\n      };\n      axios.post(\"/api/kafka/addQuiz\", payloadData);\n      console.log(\"from Contest store\", response.data);\n      if (response.data) {\n        successData(response.data);\n      }\n      commit('setAddContest', response.data);\n    },\n    async GET_CONTEST_BY_ID({\n      commit\n    }, {\n      id,\n      successData\n    }) {\n      // /contest/getContestById/{id}\n      const response = await axios.get(\"/api/contest/getContestById/\" + id);\n\n      // console.log(response.data)\n      successData(response.data);\n      commit('setContestIdData', response.data);\n    },\n    async GET_DYNAMIC_ID({\n      commit\n    }, {\n      id,\n      successData\n    }) {\n      const response = await axios.get(\"/api/DynamicContest/getDynamicContestById/\" + id);\n      console.log(\"from store dynamic\", response.data);\n      successData(response.data);\n      commit(\"setDynamicIdData\", response.data);\n    },\n    async REGISTER({\n      commit\n    }, {\n      payload\n    }) {\n      const response = await axios.post(\"/api/auth/register\", payload);\n      console.log(\"reponse data\", response);\n      commit('setRegister', response.data);\n    },\n    async LOGIN({\n      commit\n    }, {\n      payload\n    }) {\n      const response = await axios.post(\"/api/auth/login\", payload);\n      console.log(\"response login\", response.data);\n      sessionStorage.setItem(\"userName\", payload.username);\n      sessionStorage.setItem(\"userId\", response.data.userId);\n      commit(\"setLoginBool\", true);\n      commit(\"setLogin\", response.data.userId);\n    },\n    RESET_LOGIN({\n      commit\n    }) {\n      const reponse = commit('resetLogin');\n    }\n  }\n};","map":{"version":3,"names":["axios","state","addContest","contestIdData","dynamicIdData","register","login","loginUser","sessionStorage","getItem","loginBool","getters","getAddContest","getContestIdData","getRegister","getLogin","getLoginUser","console","log","getLoginBool","getDynamicIdData","mutations","setAddContest","value","setContestIdData","setRegister","setLogin","setLoginBool","setDynamicIdData","resetLogin","actions","ADD_CONTEST","commit","payload","successData","response","post","date","Date","payloadData","quizId","data","quizTopic","contentCategory","startTime","getTime","GET_CONTEST_BY_ID","id","get","GET_DYNAMIC_ID","REGISTER","LOGIN","setItem","username","userId","RESET_LOGIN","reponse"],"sources":["/Users/yeshwanthmunagapati/Desktop/Team6-Quiz/frontend/guiz-app/src/store/QuizMaster.js"],"sourcesContent":["import axios from \"axios\";\n\nexport default {\n    state: {\n        addContest: \"\",\n        contestIdData: \"\",\n        dynamicIdData: \"\",\n        register: \"\",\n        login: \"\",\n        loginUser: sessionStorage.getItem(\"userName\") ? sessionStorage.getItem(\"userName\"): \"\",\n        loginBool: sessionStorage.getItem(\"userId\") ? true : false,\n    },\n    getters: {\n        getAddContest: (state) => {\n            return state.addContest\n        },\n        getContestIdData: (state) => {\n            return state.contestIdData\n        },\n        getRegister: (state) => {\n            return state.register\n        },\n        getLogin: (state) => {\n            return state.login\n        },\n        getLoginUser: (state) => {\n            console.log(state.loginUser)\n            return state.loginUser\n        },\n        getLoginBool: (state) => {\n            return state.loginBool;\n        },\n        getDynamicIdData: (state) => {\n            return state.dynamicIdData\n        }\n    },\n    mutations: {\n        setAddContest: (state, value) => {\n            state.addContest = value;\n        },\n        setContestIdData: (state, value) => {\n            state.contestIdData = value\n        },\n        setRegister: (state, value) => {\n            state.register = value\n        },\n        setLogin: (state, value) => {\n            state.login = value\n        },\n        setLoginBool: (state, value) => {\n            state.loginBool = value;\n        },\n        setDynamicIdData: (state, value) => {\n            state.dynamicIdData = value;\n        },\n        resetLogin: (state) => {\n            state.loginBool = false\n            state.login = \"\"\n        },\n    },\n    actions: {\n        async ADD_CONTEST({commit}, {payload, successData}) {\n            const response = await axios.post(\"/api/QuizMaster/addContest\", payload);\n            const date = new Date();\n            const payloadData = {\n                quizId: response.data,\n                quizTopic: payload.contentCategory,\n                startTime: date.getTime(),\n            }\n            axios.post(\"/api/kafka/addQuiz\", payloadData)\n            console.log(\"from Contest store\",response.data)\n            if(response.data) {\n                successData(response.data)\n            }\n            commit('setAddContest', response.data)\n        },\n        async GET_CONTEST_BY_ID({commit}, { id, successData}) {\n            // /contest/getContestById/{id}\n            const response = await axios.get(\"/api/contest/getContestById/\"+ id);\n            \n            // console.log(response.data)\n            successData(response.data)\n            commit('setContestIdData', response.data)\n        },\n        async GET_DYNAMIC_ID({commit}, {id, successData}){\n            const response = await axios.get(\"/api/DynamicContest/getDynamicContestById/\"+ id);\n            console.log(\"from store dynamic\", response.data)\n            successData(response.data)\n            commit(\"setDynamicIdData\", response.data)\n        },\n        async REGISTER({commit}, {payload}) {\n            const response = await axios.post(\"/api/auth/register\", payload) \n            console.log(\"reponse data\",response)\n            commit('setRegister', response.data)\n        },\n        async LOGIN({commit}, {payload}) {\n            const response = await axios.post(\"/api/auth/login\", payload)\n            console.log(\"response login\", response.data)\n            sessionStorage.setItem(\"userName\", payload.username)\n            sessionStorage.setItem(\"userId\", response.data.userId)\n            commit(\"setLoginBool\", true);\n            commit(\"setLogin\", response.data.userId);\n        },\n        RESET_LOGIN({commit}) {\n            const reponse = \n            commit('resetLogin')\n        }   \n\n    },\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}