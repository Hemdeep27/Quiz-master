{"ast":null,"code":"import { mapActions, mapGetters } from \"vuex\";\nexport default {\n  name: \"QuestionComponent\",\n  emits: [\"question-data\"],\n  props: {\n    questionType: {\n      typeof: String,\n      default: \"text\",\n      require: true\n    }\n  },\n  computed: {\n    ...mapGetters([\"getFirebaseDownloadRes\", \"getFirebaseUploadRes\"]),\n    typeOfQuestion() {\n      if (this.questionType === \"TEXT\") {\n        return \"text\";\n      } else {\n        return \"file\";\n      }\n    },\n    questionTypeValue() {\n      if (this.questionType === \"IMAGE\") {\n        return \"image\";\n      } else if (this.questionType === \"VIDEO\") {\n        return \"video\";\n      } else {\n        return \"audio\";\n      }\n    },\n    questionBool() {\n      if (this.questionType === \"TEXT\") {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  },\n  data() {\n    return {\n      fileName: \"\",\n      questionData: {\n        question: \"\",\n        questionUrl: \"\",\n        difficulty: \"\",\n        optionOne: \"\",\n        optionTwo: \"\",\n        optionThree: \"\",\n        optionFour: \"\",\n        marks: \"\"\n      },\n      textQuestion: \"\",\n      selectValue: \"easy\",\n      options: [{\n        text: \"easy\",\n        value: \"easy\"\n      }, {\n        text: \"difficult\",\n        value: \"difficult\"\n      }]\n    };\n  },\n  watch: {\n    questionData() {\n      console.log(this.questionData);\n    }\n  },\n  methods: {\n    ...mapActions([\"FIREBASE_UANDD\"]),\n    questionDataHandler(data) {\n      if (this.questionData.difficulty === \"easy\") {\n        this.questionData.marks = 1;\n      } else {\n        this.questionData.marks = 2;\n      }\n      data = this.questionData;\n      console.log(\"Question Data\", data);\n      this.$emit(\"question-data\", data);\n    },\n    fileChange(event) {\n      const file = event.target.files[0];\n      this.fileName = file.name;\n      console.log(this.fileName);\n    },\n    async uploadHandler() {\n      const refValue = this.$refs.fileType.files[0];\n      // console.log(\"Questoin component ref value\",refValue)\n      await this.$store.dispatch(\"FIREBASE_UANDD\", {\n        fileName: this.fileName,\n        refValue: refValue\n      });\n      // setTimeout(())\n      this.questionData.questionUrl = this.getFirebaseDownloadRes;\n      // console.log(this.getFirebaseDownloadRes)\n    }\n  }\n};","map":{"version":3,"mappings":"AA+DA;AAEA;EACAA;EACAC;EACAC;IACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;IACAC;MACA;QACA;MACA;QACA;MACA;IACA;IACAC;MACA;QACA;MACA;QACA;MACA;QACA;MACA;IACA;IACAC;MACA;QACA;MACA;QACA;MACA;IACA;EACA;EACAC;IACA;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC,UACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA;IAEA;EACA;EACAC;IACAd;MACAe;IACA;EACA;EACAC;IACA;IACAC;MACA;QACA;MACA;QACA;MACA;MACAnB;MACAiB;MACA;IACA;IACAG;MACA;MACA;MACAH;IACA;IACA;MACA;MACA;MACA;QACAhB;QACAoB;MACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["name","emits","props","questionType","typeof","default","require","computed","typeOfQuestion","questionTypeValue","questionBool","data","fileName","questionData","question","questionUrl","difficulty","optionOne","optionTwo","optionThree","optionFour","marks","textQuestion","selectValue","options","text","value","watch","console","methods","questionDataHandler","fileChange","refValue"],"sourceRoot":"src/components","sources":["QuestionComponent.vue"],"sourcesContent":["<template>\n  <div class=\"question\">\n    <!-- <h1> Question</h1> -->\n    <div class=\"questoinMain\">\n      <div class=\"questionTop\">\n        <div class=\"\">\n          <label>Enter Question</label><br />\n          <input type=\"text\" v-model=\"questionData.question\" />\n\n          <input\n            id=\"fileCss\"\n            :type=\"typeOfQuestion\"\n            v-if=\"questionBool\"\n            :accept=\"`${questionTypeValue}/*`\"\n            @change=\"fileChange\"\n            ref=\"fileType\"\n          /><br v-if=\"questionBool\" />\n          <button @click=\"uploadHandler\" v-if=\"questionBool\">Upload</button>\n        </div>\n        <div>\n          <label>Question difficulty</label><br />\n          <select v-model=\"questionData.difficulty\">\n            <option\n              v-for=\"option in options\"\n              :value=\"option.value\"\n              :key=\"option.value\"\n            >\n              {{ option.text }}\n            </option>\n          </select>\n          <!-- <br /> -->\n        </div>\n        <!-- <br> -->\n      </div>\n      <div class=\"questionBottom\">\n        <!-- <br> -->\n        <div>\n          <br>\n          <label>option1</label><br />\n          <input type=\"text\" v-model=\"questionData.optionOne\" /><br>\n          <label>option2</label> <br>\n          <input type=\"text\" v-model=\"questionData.optionTwo\" /> <br>\n          <br />\n        </div>\n\n        <div>\n          <label>option3</label> <br>\n          <input type=\"text\" v-model=\"questionData.optionThree\" /> <br>\n          <label>option4</label> <br>\n          <input type=\"text\" v-model=\"questionData.optionFour\" /> <br>\n        </div>\n      </div>\n    </div>\n\n    <!-- <div></div> -->\n    <p>Confirm and then click next</p>\n    <button @click=\"questionDataHandler\">Confirm</button>\n\n    <!-- {{ questionData }} -->\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from \"vuex\";\n\nexport default {\n  name: \"QuestionComponent\",\n  emits: [\"question-data\"],\n  props: {\n    questionType: {\n      typeof: String,\n      default: \"text\",\n      require: true,\n    },\n  },\n  computed: {\n    ...mapGetters([\"getFirebaseDownloadRes\", \"getFirebaseUploadRes\"]),\n    typeOfQuestion() {\n      if (this.questionType === \"TEXT\") {\n        return \"text\";\n      } else {\n        return \"file\";\n      }\n    },\n    questionTypeValue() {\n      if (this.questionType === \"IMAGE\") {\n        return \"image\";\n      } else if (this.questionType === \"VIDEO\") {\n        return \"video\";\n      } else {\n        return \"audio\";\n      }\n    },\n    questionBool() {\n      if (this.questionType === \"TEXT\") {\n        return false;\n      } else {\n        return true;\n      }\n    },\n  },\n  data() {\n    return {\n      fileName: \"\",\n      questionData: {\n        question: \"\",\n        questionUrl: \"\",\n        difficulty: \"\",\n        optionOne: \"\",\n        optionTwo: \"\",\n        optionThree: \"\",\n        optionFour: \"\",\n        marks: \"\",\n      },\n      textQuestion: \"\",\n      selectValue: \"easy\",\n      options: [\n        { text: \"easy\", value: \"easy\" },\n        { text: \"difficult\", value: \"difficult\" },\n      ],\n    };\n  },\n  watch: {\n    questionData() {\n      console.log(this.questionData);\n    },\n  },\n  methods: {\n    ...mapActions([\"FIREBASE_UANDD\"]),\n    questionDataHandler(data) {\n      if (this.questionData.difficulty === \"easy\") {\n        this.questionData.marks = 1;\n      } else {\n        this.questionData.marks = 2;\n      }\n      data = this.questionData;\n      console.log(\"Question Data\", data);\n      this.$emit(\"question-data\", data);\n    },\n    fileChange(event) {\n      const file = event.target.files[0];\n      this.fileName = file.name;\n      console.log(this.fileName);\n    },\n    async uploadHandler() {\n      const refValue = this.$refs.fileType.files[0];\n      // console.log(\"Questoin component ref value\",refValue)\n      await this.$store.dispatch(\"FIREBASE_UANDD\", {\n        fileName: this.fileName,\n        refValue: refValue,\n      });\n      // setTimeout(())\n      this.questionData.questionUrl = this.getFirebaseDownloadRes;\n      // console.log(this.getFirebaseDownloadRes)\n    },\n  },\n};\n</script>\n\n<style scoped>\n.questionMain {\n  /* display: flex; */\n  /* align-items: center; */\n  /* justify-content: center; */\n  /* flex-direction: row; */\n  /* flex-wrap: wrap; */\n  height: max-content;\n}\n\n.questionTop {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n}\n\n.questionBottom {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\nlabel {\n  font-size: 20px;\n  margin-top: 20px;\n}\n\ninput {\n  width: 290px;\n  height: 45px;\n  border: none;\n  border: 2px solid red;\n  border-radius: 5px;\n  margin-top: 10px;\n  font-size: 25px;\n}\n\n#fileCss {\n  margin-left: 30px;\n  width: max-content;\n  border: none;\n}\n\nselect {\n  width: 295px;\n  height: 45px;\n  border: none;\n  border: 2px solid red;\n  border-radius: 5px;\n  font-size: 25px;\n}\n\nselect:hover {\n  box-shadow: rgba(195, 28, 28, 0.55) 0px 0px 0px 4px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}